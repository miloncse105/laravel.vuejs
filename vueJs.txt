#CMD::
composer create-project --prefer-dist laravel/laravel .
composer require laravel/ui
php artisan ui bootstrap
npm install
npm install vue@next
npm install vue-loader@next
|
|
|
|
|
|
#FILE:: vite.config.js
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue'
import laravel from 'laravel-vite-plugin';
export default defineConfig({
    plugins: [
        vue(),
        laravel({
            input: ['resources/sass/app.scss', 'resources/js/app.js'],
            refresh: true,
        }),
    ],
});
|
|
|
|
|
|
#CREATE FILE:: resource/views/app.blade.php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Laravel</title>
        @vite(['resources/sass/app.scss', 'resources/js/app.js'])
    </head>

    <body>
    <div id="app"></div>
    </body>
</html>
|
|
|
|
|
|
#UPDATE:: Routes/web.php
<?php
use Illuminate\Support\Facades\Route;

Route::get('{any}', function () {
    return view('app');
})->where('any','.*');
|
|
|
|
|
|
#UPDATE:: resources/js/app.js
import './bootstrap';
import { createApp } from 'vue'
import App from './App.vue'
import router from './router.js';

const app = createApp(App);
app.use(router);
app.mount('#app');
|
|
|
|
|
|
#CREATE FILE:: resources/js/router.js
import {createWebHistory, createRouter} from "vue-router";
import home from './components/Home.vue'
import contact from './components/Contact.vue'

export const routes = [
    {
        name: 'home',
        path: '/',
        component: home
    },
    {
        name: 'contact',
        path: '/contact',
        component: contact
    }
];

const router = createRouter({
    history: createWebHistory(),
    routes: routes,
});
export default router;
|
|
|
|
|
|
#CREATE FILE:: resources/js/components/Home.vue
<template>
    <div class="home">
     <h1>{{title}}</h1>
    </div>
</template>
  
<script>
  export default {
    name: 'home',
    data () {
      return {
       title:'Home Page...'
      }
    }
  }
</script>
  
<style scoped>
  
</style>
|
|
|
|
|
|
#CREATE FILE:: resources/js/components/Contact.vue
<template>
    <div class="contact">
     <h1>{{title}}</h1>
    </div>
</template>
  
<script>
  export default {
    name: 'contact',
    data () {
      return {
       title:'Contact Page...'
      }
    }
  }
</script>
  
<style scoped>
  
</style>
|
|
|
|
|
|
#CREATE FILE:: resources/js/App.vue
<template>
<router-link to="/" class="nav-item nav-link">Home</router-link> || 
<router-link to="/contact" class="nav-item nav-link">Contact</router-link>
<router-view></router-view>
</template>
|
|
|
|
|
|
#CMD::
npm i @vitejs/plugin-vue
npm install vue-axios vue-loader vue-router vue-template-compiler

npm rum dev
php artisan serve
|
|
|
|
|
|
#CLEAN PROJECT CMD::
php artisan route:clear
php artisan cache:clear
php artisan view:clear
php artisan view:cache
php artisan config:cache
php artisan config:clear
php artisan route:cache
php artisan optimize:clear
php artisan clear-compiled
php artisan key:generate
composer dump-autoload
composer global update
|
|
|
|
|
|
#LARAVEL PHP ARTISAN CMD::
php artisan make:controller Home --resource
php artisan make:controller Home
php artisan make:model Home
php artisan make:migration create_homes
php artisan migrate
|
|
|
|
|
|
#PAGE REDIRECT TO OTHER PAGE SPECIFIC TIME::
<script>
  export default {
    created(){
      setTimeout( () => this.$router.push({ path: '/login'}), 5000);
    }
  }
</script>
|
|
|
|
|
|
#BOOTSTRAP SLIDER::
<template>
<div id="carouselExampleCaptions" class="carousel slide" data-bs-ride="carousel">
<div class="carousel-indicators">
<button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
<button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="1" aria-label="Slide 2"></button>
<button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="2" aria-label="Slide 3"></button>
</div>
<div class="carousel-inner">
<div class="carousel-item active">
<img src="https://www.niprojmipharma.com/slider/01.jpg" class="d-block w-100" alt="...">
<div class="carousel-caption d-none d-md-block">
<h5>First slide label</h5>
<p>Some representative placeholder content for the first slide.</p>
</div>
</div>
<div class="carousel-item">
<img src="https://www.niprojmipharma.com/slider/02.jpg" class="d-block w-100" alt="...">
<div class="carousel-caption d-none d-md-block">
<h5>Second slide label</h5>
<p>Some representative placeholder content for the second slide.</p>
</div>
</div>
<div class="carousel-item">
<img src="https://www.niprojmipharma.com/slider/03.jpg" class="d-block w-100" alt="...">
<div class="carousel-caption d-none d-md-block">
<h5>Third slide label</h5>
<p>Some representative placeholder content for the third slide.</p>
</div>
</div>
</div>
<button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="prev">
<span class="carousel-control-prev-icon" aria-hidden="true"></span>
<span class="visually-hidden">Previous</span>
</button>
<button class="carousel-control-next" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="next">
<span class="carousel-control-next-icon" aria-hidden="true"></span>
<span class="visually-hidden">Next</span>
</button>
</div>
</template>
|
|
|
|
|
|
#CRUD / INSERT/ VIEW/ EDIT/ DELETE/::

==INSERT-VIEW-DELETE==
<template>
<form @submit.prevent="addData">
	<label>TITLE</label>
	<input type="text" v-model="add.title">

	<label>DESCRIPTION</label>
	<input type="text" v-model="add.description">

	<button type="submit">Save</button>
</form>

<table>
<thead>
	<tr>
	<th>ID</th>
	<th>Title</th>
	<th>Description</th>
	<th>Actions</th>
	</tr>
</thead>
<tbody v-if="dataRows.length > 0">
	<tr v-for="(rows,key) in dataRows" :key="key">
	<td>{{ rows.id }}</td>
	<td>{{ rows.title }}</td>
	<td>{{ rows.description }}</td>
	<td>
	<router-link :to="{name: 'Edit', params: { id: rows.id }}" class="btn btn-primary">Edit</router-link>
	<button type="button" @click="deleteData(rows.id)" class="btn btn-danger">Delete</button>
	</td>
	</tr>
</tbody>
<tbody v-else>
	<tr>
	<td colspan="4" >No Categories Found.</td>
	</tr>
</tbody>
</table>
</template>

<script>
export default {
    name:"ADD DATA",
    data(){
        return {
            add:{
                title:null,
                description:null,
            },
            dataRows:{}
        }
    },

    mounted(){
        this.getData();
    },

    methods:{
        addData(){

	    if(!this.add.title){
            alert("PLEASE ENTER TITLE");
        }else if(!this.add.description){
            alert("PLEASE ENTER DESCRIPTION");            
        }else{
                axios.post('api/post/add',this.add).then(response=>{
                //this.$router.push({name:"Show"})
                this.add.title = null;
                this.add.description = null;
                this.getData();
            });
        }
        },

        getData(){
            axios.get('/api/post/show').then(response=>{
                this.dataRows = response.data
            });
        },

        deleteData(id){
            if(confirm("Remove From List?")){
                axios.delete(`api/post/delete/${id}`).then(response=>{
                    this.getData()
                });
            }
        }

    }
}
</script>


==EDIT==
<template>
<form @submit.prevent="updateData">
	<label>Title</label>
	<input type="text" class="form-control" v-model="post.title">

	<label>Description</label>
	<input type="text" class="form-control" v-model="post.description">

	<button type="submit" class="btn btn-primary">Update Post</button>
</form>
</template>

<script>
export default {
    name:"UPDATE DATA",
    data(){
        return {
            post: {}
        }
    },
	
    mounted(){
        this.getData();
    },
	
    methods:{
       updateData(){
            axios.post(`/api/post/update/${this.$route.params.id}`,this.post)
            .then(response=>{
                this.$router.push({name:"Add"})
            });
        },
		
        getData() {
            axios.get(`/api/post/edit/${this.$route.params.id}`)
                .then((response) => {
                    this.post = response.data;
                });
        },
    }
}
</script>


--Api.php--
<?php
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

Route::group(['prefix' => 'post'], function () {
    Route::get('show', 'App\Http\Controllers\CrudController@View_Ctrl');
    Route::post('add', 'App\Http\Controllers\CrudController@Add_Ctrl');
    Route::delete('delete/{id}', 'App\Http\Controllers\CrudController@Delete_Ctrl');
    Route::get('edit/{id}', 'App\Http\Controllers\CrudController@Edit_Ctrl');
    Route::post('update/{id}', 'App\Http\Controllers\CrudController@Update_Ctrl');
});



--Controller--
<?php
namespace App\Http\Controllers;
use Illuminate\Http\Request;

use App\Models\CrudModel;
use DB;

class CrudController extends Controller
{
        public function View_Ctrl(){
                $view =  Category::select('id','title','description')
                //->where("id",107)
                ->orderBy('id', 'ASC')
                ->get();
                return response()->json($view);
        }

        public function Add_Ctrl(Request $request){
            $add = new Category([
                'title' => $request->input('title'),
                'description' => $request->input('description')
            ]);
            $add->save();
            return response()->json('Successfully Added');
        }

        public function Edit_Ctrl($id){ 
            $post = Category::where('id', $id)->firstOrFail();
            return response()->json($post);  
        }

        public function Update_Ctrl($id, Request $request){
            $post = Category::where('id', $id)->firstOrFail();
            $post->update($request->all());
            return response()->json('Successfully updated');
            
        }

        public function Delete_Ctrl($id){
            $post = Category::where('id', $id)->firstOrFail();
            $post->delete();
            return response()->json('Successfully deleted');
        }
}
